
#define _CRT_SECURE_NO_WARNINGS
#include <iostream>
using namespace std;

struct sDate
{
	short Year;
	short Month;
	short Day;
};

short ReadYear()
{
	short Year = 0;
	cout << "Please Enter a year? ";
	cin >> Year;
	return Year;
}

short ReadMonth()
{
	short Number = 0;
	cout << "Please Enter a month? ";
	cin >> Number;
	return Number;
}

short ReadDay()
{
	short Day = 0;
	cout << "Please Enter a day? ";
	cin >> Day;
	return Day;
}

sDate ReadFullDate()
{
	sDate Date;

	Date.Day = ReadDay();
	Date.Month = ReadMonth();
	Date.Year = ReadYear();


	return Date;
}

bool isLeapYear(short Year)
{
	return (Year % 4 == 0 && Year % 100 != 0) || (Year % 400 == 0);

}

int NumberOfDaysInMonths(short Month, short Year)
{
	if (Month < 1 || Month > 12)
		return 0;

	short DaysInMonths[12] = { 31,28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31 };
	return (Month == 2) ? (isLeapYear(Year) ? 29 : 28) : DaysInMonths[Month - 1];

}

bool isDate1LessThanDate2(sDate Date1, sDate Date2)
{
	return (Date1.Year < Date2.Year ? true : (Date1.Year == Date2.Year) ? (Date1.Month < Date2.Month ? true : (Date1.Month == Date2.Month ? Date1.Day < Date2.Day : false)) : false);
}

bool isLastDayInMonth(sDate Date)
{
	return (Date.Day == NumberOfDaysInMonths(Date.Month, Date.Year));
}

bool isLastMonthInYear(short Month)
{
	return (Month == 12);
}

short DayOfWeekOrder(short Day, short Month, short Year)
{
	short a, y, m;
	a = (14 - Month) / 12;
	y = Year - a;
	m = Month + (12 * a) - 2;

	//for the gregorian calendar
	// 0 sun , 1 mon , 2, tue ...etc

	return (Day + y + (y / 4) - (y / 100) + (y / 400) + ((31 * m) / 12)) % 7;

}

short DayOfWeekOrder(sDate Date)
{
	return DayOfWeekOrder(Date.Day, Date.Month, Date.Year);
}

string DayShortName(short DayOfWeekOrder)
{
	string DaysOfWeek[7] = { "Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat" };
	return DaysOfWeek[DayOfWeekOrder];

}

sDate IncreaseDateByOneDay(sDate Date)
{
	if (isLastDayInMonth(Date))
	{
		if (isLastMonthInYear(Date.Month))
		{
			Date.Day = 1;
			Date.Month = 1;
			Date.Year++;

		}
		else
		{
			Date.Day = 1;
			Date.Month++;
		}
	}
	else
	{
		Date.Day++;
	}


	return Date;
}

bool IsWeekEnd(sDate Date)
{
	short DayIndex = DayOfWeekOrder(Date);
	return (DayIndex == 5 || DayIndex == 6);
}

bool IsBusinessDay(sDate Date)
{
	//short DayIndex = DayOfWeekOrder(Date);
	//return (DayIndex != 5 && DayIndex != 6);

	return !IsWeekEnd(Date);
}

short CalculateActualVacationDays(sDate DateFrom, sDate DateTo)
{
	short ActuaclVacationDays = 0;

	while (isDate1LessThanDate2(DateFrom, DateTo))
	{
		if (IsBusinessDay(DateFrom))
		{
			ActuaclVacationDays++;
		}

		DateFrom = IncreaseDateByOneDay(DateFrom);
	}

	return ActuaclVacationDays;
}

short ReadVacationDays()
{
	short Day = 0;
	cout << "Please Enter vacation days? ";
	cin >> Day;
	return Day;
}


sDate CalculateVacationReturnDate(sDate DateFrom, short VacationDays)
{
	short CountBusinessDays = 0;
	while (CountBusinessDays < VacationDays)
	{
		if (IsBusinessDay(DateFrom))
		{
			CountBusinessDays++;
		}

		DateFrom = IncreaseDateByOneDay(DateFrom);
	}

	return DateFrom;

	//short WeekEndCounter = 0;

	////in case the data  is weekend keep adding one day util you reach business day
	////we get rid of all weekends before the first business day
	//while (IsWeekEnd(DateFrom))
	//{
	//	DateFrom = IncreaseDateByOneDay(DateFrom);
	//}

	////here we increase the vacation dates to add all weekends to it.

	//for (short i = 1; i <= VacationDays + WeekEndCounter; i++)
	//{

	//	if (IsWeekEnd(DateFrom))
	//		WeekEndCounter++;

	//	DateFrom = IncreaseDateByOneDay(DateFrom);
	//}

	////in case the return date is week end keep adding one day util you reach business day
	//while (IsWeekEnd(DateFrom))
	//{
	//	DateFrom = IncreaseDateByOneDay(DateFrom);
	//}

	//return DateFrom;
}
int main()
{
	

	cout << "Vacation Starts:\n";
	sDate DateFrom = ReadFullDate();

	short VacationDays = ReadVacationDays();

	sDate ReturnDate = CalculateVacationReturnDate(DateFrom, VacationDays);

	cout << "\n\nReturn Date: " << DayShortName(DayOfWeekOrder(ReturnDate)) << " , ";
	cout << ReturnDate.Day << "/" << ReturnDate.Month << "/" << ReturnDate.Year << endl;


	return 0;
}