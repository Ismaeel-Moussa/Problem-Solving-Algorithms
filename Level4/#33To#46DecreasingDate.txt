
#include <iostream>
using namespace std;

struct sDate
{
	short Year;
	short Month;
	short Day;
};

short ReadYear()
{
	short Year = 0;
	cout << "Please Enter a year? ";
	cin >> Year;
	return Year;
}

short ReadMonth()
{
	short Number = 0;
	cout << "Please Enter a month? ";
	cin >> Number;
	return Number;
}

short ReadDay()
{
	short Day = 0;
	cout << "Please Enter a day? ";
	cin >> Day;
	return Day;
}

sDate ReadFullDate()
{
	sDate Date;

	Date.Day = ReadDay();
	Date.Month = ReadMonth();
	Date.Year = ReadYear();


	return Date;
}

bool isLeapYear(short Year)
{
	return (Year % 4 == 0 && Year % 100 != 0) || (Year % 400 == 0);

}

int NumberOfDaysInMonths(short Month, short Year)
{
	if (Month < 1 || Month > 12)
		return 0;

	short DaysInMonths[12] = { 31,28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31 };
	return (Month == 2) ? (isLeapYear(Year) ? 29 : 28) : DaysInMonths[Month - 1];

}

bool isDate1LessThanDate2(sDate Date1, sDate Date2)
{
	return (Date1.Year < Date2.Year ? true : (Date1.Year == Date2.Year) ? (Date1.Month < Date2.Month ? true : (Date1.Month == Date2.Month ? Date1.Day < Date2.Day : false)) : false);
}

bool isLastDayInMonth(sDate Date)
{
	return (Date.Day == NumberOfDaysInMonths(Date.Month, Date.Year));
}

bool isLastMonthInYear(short Month)
{
	return (Month == 12);
}

short NumberOfDaysFromTheBeginingOfYear(short Day, short Month, short Year)
{
	short TotalDays = 0;
	for (int i = 1; i <= Month - 1; i++)
	{
		TotalDays += NumberOfDaysInMonths(i, Year);
	}

	TotalDays += Day;

	return TotalDays;
}

sDate DecreaseDateByOneDay(sDate Date)
{
	
	if (Date.Day == 1)
	{
		if (Date.Month == 1)
		{
			Date.Year--;
			Date.Month = 12;
			Date.Day = 31;
			
		}
		else
		{
			Date.Month--;
			Date.Day = NumberOfDaysInMonths(Date.Month, Date.Year);
		}

	}
	else
	{
		Date.Day--;
	}

	return Date;
}

sDate DecreaseDateByXDays(sDate Date, short XDays)
{
	for (short i = 1; i <= XDays; i++)
	{
		Date = DecreaseDateByOneDay(Date);
	}

	return Date;
}

sDate DecreaseDateByOneWeek(sDate Date)
{
	for (short i = 1; i <= 7; i++)
	{
		Date = DecreaseDateByOneDay(Date);
	}

	return Date;
}

sDate DecreaseDateByXWeek(sDate Date, short XWeeks)
{
	for (short i = 1; i <= XWeeks; i++)
	{
		Date = DecreaseDateByOneWeek(Date);
	}

	return Date;
}

sDate DecreaseDateByOneMonth(sDate Date)
{
	if (Date.Month == 1)
	{
		Date.Month = 12;
		Date.Year--;
	}
	else
	{
		Date.Month--;
	}

	short NumberOfDaysInCurrentMonth = NumberOfDaysInMonths(Date.Month, Date.Year);

	if (Date.Day > NumberOfDaysInCurrentMonth)
	{
		Date.Day = NumberOfDaysInCurrentMonth;
	}

	return Date;
}

sDate DecreaseDateByXMonths(sDate Date, short XMonths)
{
	for (short i = 1; i <= XMonths; i++)
	{
		Date = DecreaseDateByOneMonth(Date);
	}

	return Date;
}

sDate DecreaseDateByOneYear(sDate Date)
{
	Date.Year--;

	if (Date.Month == 2 && !isLeapYear(Date.Year) && Date.Day == 29)
	{
		Date.Day = 28;
	}

	return Date;
}

sDate DecreaseDateByXYear(sDate Date, short XYears)
{
	for (short i = 1; i <= XYears; i++)
	{
		Date = DecreaseDateByOneYear(Date);
	}

	return Date;
}

sDate DecreaseDateByXYearsFaster(sDate Date, short XYears)
{
	Date.Year -= XYears;

	return Date;
}

sDate DecreaseDateByOneDecade(sDate Date)
{
	Date.Year -= 10;

	return Date;
}

sDate DecreaseDateByXDecades(sDate Date, short XDecades)
{

	//for (short i = i; i <= XDecades; i++)
	//{
	//	Date = DecreaseDateByOneDecade(Date);
	//}

	for (short i = 1; i <= XDecades * 10; i++)
	{
		Date = DecreaseDateByOneYear(Date);
	}

	return Date;
}

sDate DecreaseDateByXDecadesFaster(sDate Date, short XDecades)
{
	Date.Year -= XDecades * 10;

	return Date;
}

sDate DecreaseDateByOneCentury(sDate Date)
{
	Date.Year -= 100;

	return Date;
}

sDate DecreaseDateByOneMillennium(sDate Date)
{
	Date.Year -= 1000;

	return Date;
}


int main()
{
	sDate Date;

	Date = ReadFullDate();

	cout << "\nDate After : \n\n";

	Date = DecreaseDateByOneDay(Date);
	cout << "01-Subtracting ond day is : " << Date.Day << "/" << Date.Month << "/" << Date.Year << endl;

	Date = DecreaseDateByXDays(Date, 10);
	cout << "02-Subtracting 10 day is : " << Date.Day << "/" << Date.Month << "/" << Date.Year << endl;

	Date = DecreaseDateByOneWeek(Date);
	cout << "03-Subtracting One Week is : " << Date.Day << "/" << Date.Month << "/" << Date.Year << endl;

	Date = DecreaseDateByXWeek(Date, 10);
	cout << "04-Subtracting 10 Weeks is : " << Date.Day << "/" << Date.Month << "/" << Date.Year << endl;

	Date = DecreaseDateByOneMonth(Date);
	cout << "05-Subtracting one month is : " << Date.Day << "/" << Date.Month << "/" << Date.Year << endl;

	Date = DecreaseDateByXMonths(Date, 5);
	cout << "06-Subtracting 5 months is : " << Date.Day << "/" << Date.Month << "/" << Date.Year << endl;

	Date = DecreaseDateByOneYear(Date);
	cout << "07-Subtracting one year is : " << Date.Day << "/" << Date.Month << "/" << Date.Year << endl;

	Date = DecreaseDateByXYear(Date, 10);
	cout << "08-Subtracting 10 years is : " << Date.Day << "/" << Date.Month << "/" << Date.Year << endl;

	Date = DecreaseDateByXYearsFaster(Date, 10);
	cout << "09-Subtracting 10 years (faster) is : " << Date.Day << "/" << Date.Month << "/" << Date.Year << endl;

	Date = DecreaseDateByOneDecade(Date);
	cout << "10-Subtracting One decade is : " << Date.Day << "/" << Date.Month << "/" << Date.Year << endl;

	Date = DecreaseDateByXDecades(Date, 10);
	cout << "11-Subtracting 10 decades is : " << Date.Day << "/" << Date.Month << "/" << Date.Year << endl;

	Date = DecreaseDateByXDecadesFaster(Date, 10);
	cout << "12-Subtracting 10 decades (faster) is : " << Date.Day << "/" << Date.Month << "/" << Date.Year << endl;

	Date = DecreaseDateByOneCentury(Date);
	cout << "13-Subtracting One Century is : " << Date.Day << "/" << Date.Month << "/" << Date.Year << endl;

	Date = DecreaseDateByOneMillennium(Date);
	cout << "14-Subtracting One Millennium is : " << Date.Day << "/" << Date.Month << "/" << Date.Year << endl;

	return 0;
}