
#define _CRT_SECURE_NO_WARNINGS
#include <iostream>
using namespace std;

struct sDate
{
	short Year;
	short Month;
	short Day;
};

struct sPeriod
{
	sDate StartDate;
	sDate EndDate;
};

short ReadYear()
{
	short Year = 0;
	cout << "Please Enter a year? ";
	cin >> Year;
	return Year;
}

short ReadMonth()
{
	short Number = 0;
	cout << "Please Enter a month? ";
	cin >> Number;
	return Number;
}

short ReadDay()
{
	short Day = 0;
	cout << "Please Enter a day? ";
	cin >> Day;
	return Day;
}

sDate ReadFullDate()
{
	sDate Date;

	Date.Day = ReadDay();
	Date.Month = ReadMonth();
	Date.Year = ReadYear();


	return Date;
}

bool isLeapYear(short Year)
{
	return (Year % 4 == 0 && Year % 100 != 0) || (Year % 400 == 0);

}

int NumberOfDaysInMonths(short Month, short Year)
{
	if (Month < 1 || Month > 12)
		return 0;

	short DaysInMonths[12] = { 31,28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31 };
	return (Month == 2) ? (isLeapYear(Year) ? 29 : 28) : DaysInMonths[Month - 1];

}

bool isDate1LessThanDate2(sDate Date1, sDate Date2)
{
	return (Date1.Year < Date2.Year ? true : (Date1.Year == Date2.Year) ? (Date1.Month < Date2.Month ? true : (Date1.Month == Date2.Month ? Date1.Day < Date2.Day : false)) : false);
}

bool isDate1EqualsThanDate2(sDate Date1, sDate Date2)
{
	return ((Date1.Year == Date2.Year) && (Date1.Month == Date2.Month) && (Date1.Day == Date2.Day));
}

bool IsDate1AfterDate2(sDate Date1, sDate Date2)
{
	return (!isDate1LessThanDate2(Date1, Date2) && !isDate1EqualsThanDate2(Date1,Date2));
}

bool isLastDayInMonth(sDate Date)
{
	return (Date.Day == NumberOfDaysInMonths(Date.Month, Date.Year));
}

bool isLastMonthInYear(short Month)
{
	return (Month == 12);
}

sPeriod ReadPeriod()
{
	sPeriod Period;

	cout << "Enter Start Date : \n" << endl;
	Period.StartDate = ReadFullDate();

	cout << "\nEnter End Date : \n" << endl;
	Period.EndDate = ReadFullDate();

	return Period;
}

sDate IncreaseDateByOneDay(sDate Date)
{
	if (isLastDayInMonth(Date))
	{
		if (isLastMonthInYear(Date.Month))
		{
			Date.Day = 1;
			Date.Month = 1;
			Date.Year++;

		}
		else
		{
			Date.Day = 1;
			Date.Month++;
		}
	}
	else
	{
		Date.Day++;
	}


	return Date;
}

short GetDifferenceInDays(sDate Date1, sDate Date2, bool IncludeEndDay = false)
{
	int Days = 0;

	while (isDate1LessThanDate2(Date1, Date2))
	{
		Days++;
		Date1 = IncreaseDateByOneDay(Date1);
	}

	return IncludeEndDay ? ++Days : Days;
}

enum enDateCompare { Before = -1, Equal = 0, After = 1 };

enDateCompare CompareDates(sDate Date1, sDate Date2)
{
	if (isDate1LessThanDate2(Date1, Date2))
		return enDateCompare::Before;

	if (isDate1EqualsThanDate2(Date1, Date2))
		return enDateCompare::Equal;

	//if (IsDate1AfterDate2(Date1, Date2))
	//	return enDateCompare::After;

	// this faster 
	return enDateCompare::After;
}

bool isDateInPeriod(sDate Date , sPeriod Period)
{
	return  !(CompareDates(Date, Period.StartDate) == enDateCompare::Before
			||
			CompareDates(Date, Period.EndDate) == enDateCompare::After);
			

}

int main()
{
	cout << "Enter Period 1:" << endl;
	sPeriod Period1 = ReadPeriod();

	cout << "\nEnter Date To check :\n";
	sDate Date = ReadFullDate();
		
	if (isDateInPeriod(Date, Period1))
	{
		cout << "Yes , Date is within period " << endl;
	}
	else
	{
		cout << "No , Date is NOT within period " << endl;
	}



	return 0;
}