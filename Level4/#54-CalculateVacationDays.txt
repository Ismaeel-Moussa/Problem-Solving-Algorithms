
#define _CRT_SECURE_NO_WARNINGS
#include <iostream>
using namespace std;

struct sDate
{
	short Year;
	short Month;
	short Day;
};

short ReadYear()
{
	short Year = 0;
	cout << "Please Enter a year? ";
	cin >> Year;
	return Year;
}

short ReadMonth()
{
	short Number = 0;
	cout << "Please Enter a month? ";
	cin >> Number;
	return Number;
}

short ReadDay()
{
	short Day = 0;
	cout << "Please Enter a day? ";
	cin >> Day;
	return Day;
}

sDate ReadFullDate()
{
	sDate Date;

	Date.Day = ReadDay();
	Date.Month = ReadMonth();
	Date.Year = ReadYear();


	return Date;
}

bool isLeapYear(short Year)
{
	return (Year % 4 == 0 && Year % 100 != 0) || (Year % 400 == 0);

}

int NumberOfDaysInMonths(short Month, short Year)
{
	if (Month < 1 || Month > 12)
		return 0;

	short DaysInMonths[12] = { 31,28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31 };
	return (Month == 2) ? (isLeapYear(Year) ? 29 : 28) : DaysInMonths[Month - 1];

}

bool isDate1LessThanDate2(sDate Date1, sDate Date2)
{
	return (Date1.Year < Date2.Year ? true : (Date1.Year == Date2.Year) ? (Date1.Month < Date2.Month ? true : (Date1.Month == Date2.Month ? Date1.Day < Date2.Day : false)) : false);
}

bool isLastDayInMonth(sDate Date)
{
	return (Date.Day == NumberOfDaysInMonths(Date.Month, Date.Year));
}

bool isLastMonthInYear(short Month)
{
	return (Month == 12);
}

short NumberOfDaysFromTheBeginingOfYear(short Day, short Month, short Year)
{
	short TotalDays = 0;
	for (int i = 1; i <= Month - 1; i++)
	{
		TotalDays += NumberOfDaysInMonths(i, Year);
	}

	TotalDays += Day;

	return TotalDays;
}

short NumberOfDaysFromTheBeginingOfYear(sDate Date)
{
	short TotalDays = 0;
	for (int i = 1; i <= Date.Month - 1; i++)
	{
		TotalDays += NumberOfDaysInMonths(i, Date.Year);
	}

	TotalDays += Date.Day;

	return TotalDays;
}

short DayOfWeekOrder(short Day, short Month, short Year)
{
	short a, y, m;
	a = (14 - Month) / 12;
	y = Year - a;
	m = Month + (12 * a) - 2;

	//for the gregorian calendar
	// 0 sun , 1 mon , 2, tue ...etc

	return (Day + y + (y / 4) - (y / 100) + (y / 400) + ((31 * m) / 12)) % 7;

}

short DayOfWeekOrder(sDate Date)
{
	return DayOfWeekOrder(Date.Day, Date.Month, Date.Year);
}

string DayShortName(short DayOfWeekOrder)
{
	string DaysOfWeek[7] = { "Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat" };
	return DaysOfWeek[DayOfWeekOrder];

}

sDate IncreaseDateByOneDay(sDate Date)
{
	if (isLastDayInMonth(Date))
	{
		if (isLastMonthInYear(Date.Month))
		{
			Date.Day = 1;
			Date.Month = 1;
			Date.Year++;

		}
		else
		{
			Date.Day = 1;
			Date.Month++;
		}
	}
	else
	{
		Date.Day++;
	}


	return Date;
}

short GetDifferenceInDays(sDate Date1, sDate Date2, bool IncludeEndDay = false)
{
	int Days = 0;

	while (isDate1LessThanDate2(Date1, Date2))
	{
		Days++;
		Date1 = IncreaseDateByOneDay(Date1);
	}

	return IncludeEndDay ? ++Days : Days;

}

sDate GetSystemDate()
{
	sDate Date;

	time_t t = time(0);
	tm* now = localtime(&t);

	Date.Day = now->tm_mday;
	Date.Month = now->tm_mon + 1;
	Date.Year = now->tm_year + 1900;

	return Date;
}

bool IsEndOfWeek(sDate Date)
{
	return (DayOfWeekOrder(Date) == 6);	
}

bool IsWeekEnd(sDate Date)
{
	short DayIndex = DayOfWeekOrder(Date);
	return (DayIndex == 5 || DayIndex == 6);
}

bool IsBusinessDay(sDate Date)
{
	//short DayIndex = DayOfWeekOrder(Date);
	//return (DayIndex != 5 && DayIndex != 6);

	return !IsWeekEnd(Date);
}

short DaysUntilEndOfWeek(sDate Date)
{
	return (6 - DayOfWeekOrder(Date));
}

short DaysUntilEndOfMonth(sDate Date)
{
	sDate EndOfMonthDate;

	EndOfMonthDate.Day = NumberOfDaysInMonths(Date.Month,Date.Year);
	EndOfMonthDate.Month = Date.Month;
	EndOfMonthDate.Year = Date.Year;

	return GetDifferenceInDays(Date, EndOfMonthDate, true);
}

short DaysUntilEndOfYear(sDate Date)
{
	sDate EndOfYearDate;

	EndOfYearDate.Day = 31;
	EndOfYearDate.Month = 12;
	EndOfYearDate.Year = Date.Year;

	return GetDifferenceInDays(Date, EndOfYearDate, true);
}

short CalculateActualVacationDays(sDate DateFrom, sDate DateTo)
{
	short ActuaclVacationDays = 0;

	while (isDate1LessThanDate2(DateFrom, DateTo))
	{
		if (IsBusinessDay(DateFrom))
		{
			ActuaclVacationDays++;
		}

		DateFrom = IncreaseDateByOneDay(DateFrom);
	}

	return ActuaclVacationDays;
}
int main()
{
	sDate DateFrom, DateTo;

	cout << "Vacation Starts:\n";
	DateFrom = ReadFullDate();

	cout << "\nVacation Ends:\n";
	DateTo = ReadFullDate();

	cout << "\nVacation From : " << DayShortName(DayOfWeekOrder(DateFrom)) << " , ";
	cout << DateFrom.Day << "/" << DateFrom.Month << "/" << DateFrom.Year << endl;

	cout << "Vacation To : " << DayShortName(DayOfWeekOrder(DateTo)) << " , ";
	cout << DateTo.Day << "/" << DateTo.Month << "/" << DateTo.Year << endl;
	

	cout << "\nActucal Vacation Days is: " << CalculateActualVacationDays(DateFrom, DateTo);
	return 0;
}