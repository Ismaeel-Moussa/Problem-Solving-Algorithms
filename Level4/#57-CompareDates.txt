
#define _CRT_SECURE_NO_WARNINGS
#include <iostream>
using namespace std;

struct sDate
{
	short Year;
	short Month;
	short Day;
};

short ReadYear()
{
	short Year = 0;
	cout << "Please Enter a year? ";
	cin >> Year;
	return Year;
}

short ReadMonth()
{
	short Number = 0;
	cout << "Please Enter a month? ";
	cin >> Number;
	return Number;
}

short ReadDay()
{
	short Day = 0;
	cout << "Please Enter a day? ";
	cin >> Day;
	return Day;
}

sDate ReadFullDate()
{
	sDate Date;

	Date.Day = ReadDay();
	Date.Month = ReadMonth();
	Date.Year = ReadYear();


	return Date;
}

bool isDate1LessThanDate2(sDate Date1, sDate Date2)
{
	return (Date1.Year < Date2.Year ? true : (Date1.Year == Date2.Year) ? (Date1.Month < Date2.Month ? true : (Date1.Month == Date2.Month ? Date1.Day < Date2.Day : false)) : false);
}

bool isDate1EqualsThanDate2(sDate Date1, sDate Date2)
{
	return ((Date1.Year == Date2.Year) && (Date1.Month == Date2.Month) && (Date1.Day == Date2.Day));
}

bool IsDate1AfterDate2(sDate Date1, sDate Date2)
{
	return (!isDate1LessThanDate2(Date1, Date2) && !isDate1EqualsThanDate2(Date1,Date2));
}

enum enDateCompare {Before = -1,Equal = 0, After = 1};

enDateCompare CompareDates(sDate Date1, sDate Date2)
{
	if (isDate1LessThanDate2(Date1, Date2))
		return enDateCompare::Before;

	if (isDate1EqualsThanDate2(Date1, Date2))
		return enDateCompare::Equal;

	//if (IsDate1AfterDate2(Date1, Date2))
	//	return enDateCompare::After;

	// this faster 
	return enDateCompare::After;
}

int main()
{
	

	cout << "Enter Date1:\n";
	sDate Date1 = ReadFullDate();

	cout << "\nEnter Date2:\n";
	sDate Date2 = ReadFullDate();

	cout << "Compare Result = " << CompareDates(Date1, Date2);


	return 0;
}