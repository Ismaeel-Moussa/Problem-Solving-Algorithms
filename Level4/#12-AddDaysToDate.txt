#include <iostream>
using namespace std;

struct sDate
{
	short Year;
	short Month;
	short Day;
};

short ReadYear()
{
	short Year = 0;
	cout << "Please Enter a year? ";
	cin >> Year;
	return Year;
}

short ReadMonth()
{
	short Number = 0;
	cout << "Please Enter a month? ";
	cin >> Number;
	return Number;
}

short ReadDay()
{
	short Day = 0;
	cout << "Please Enter a day? ";
	cin >> Day;
	return Day;
}

short ReadDaysToAdd()
{
	short DaysToAdd;
	cout << "How many days to add ?";
	cin >> DaysToAdd;

	return DaysToAdd;

}

sDate ReadFullDate()
{
	sDate Date;
	
	Date.Day = ReadDay();
	Date.Month = ReadMonth();
	Date.Year = ReadYear();

	return Date;
}

bool isLeapYear(short Year)
{
	return (Year % 4 == 0 && Year % 100 != 0) || (Year % 400 == 0);

}

int NumberOfDaysInMonths(short Month, short Year)
{
	if (Month < 1 || Month > 12)
		return 0;

	short DaysInMonths[12] = { 31,28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31 };
	return (Month == 2) ? (isLeapYear(Year) ? 29 : 28) : DaysInMonths[Month - 1];
}

short NumberOfDaysFromTheBeginingOfYear(short Day, short Month, short Year)
{
	short TotalDays = 0;
	for (int i = 1; i <= Month - 1; i++)
	{
		TotalDays += NumberOfDaysInMonths(i, Year);
	}

	TotalDays += Day;

	return TotalDays;
}

sDate AddDaysToDate(short Days , sDate Date)
{
	short RemainingDays = Days + NumberOfDaysFromTheBeginingOfYear(Date.Day, Date.Month, Date.Year);
	short MonthDays = 0;

	Date.Month = 1;

	while (true)
	{
		MonthDays = NumberOfDaysInMonths(Date.Month, Date.Year);

		if (RemainingDays > MonthDays)
		{
			RemainingDays -= MonthDays;
			Date.Month++;

			if (Date.Month > 12)
			{
				Date.Month = 1;
				Date.Year++;
			}
		}
		else
		{
			Date.Day = RemainingDays;
			break;
		}
	}

	return Date;
}


int main()
{
	sDate Date;

	Date = ReadFullDate();
	short Days = ReadDaysToAdd();


	Date = AddDaysToDate(Days,Date);

	cout << "Date after adding [" << Days << "] is: ";
	cout << Date.Day << "/" << Date.Month << "/" << Date.Year;



	return 0;
}